package com.ljf.company.day10;

/**
 * @Author 龙江锋
 * @Date 2021/3/8 22:42
 * @Version 1.0
 *
 * 本类用来测试接口与类之间的复杂关系
 */
public class Multiple {
    public static void main(String[] args) {

        //创建多态对象进行测试
        Inter10 in = new InterImpl3();
        in.delete();//删除中....
        in.save();//保存中....
        //in.inquire();//运行看右边(子类),不能调用子类的特有方法

        Inter20 in1 = new InterImpl3();
        in1.inquire();//查询中....
        in1.update();//更新中....

        Inter30 in2 = new InterImpl3();
        in2.update();//查询中....
        in2.delete();//删除中....
        in2.inquire();//更新中....
        in2.save();//保存中....
    }
}

/**1.创建接口1*/
interface Inter10{
    /**保存功能*/
    void save();
    /**删除功能*/
    void delete();
}

/**2.创建接口2*/
interface Inter20{
    /**更新功能*/
    void update();
    /**查询功能*/
    void inquire();
}

//4.创建接口3来测试接口之间的继承关系
/**2.接口之间可以发生继承关系,而且还可以多继承,接口与接口之间用逗号隔开*/
interface Inter30 extends Inter10,Inter20{ }

/**
 * 1.接口和实现类之间可以建立实现关系,通过implements关键字来完成
 * 注意:由于java是单继承多实现,所以,要先继承,再写实现
 * */
//3.创建接口的实现类

class InterImpl3 implements Inter30 {

    @Override
    public void update() {
        System.out.println("更新中....");
    }

    @Override
    public void inquire() {
        System.out.println("查询中....");
    }

    @Override
    public void save() {
        System.out.println("保存中....");
    }

    @Override
    public void delete() {
        System.out.println("删除中....");
    }
}

/*总结
1.类与类的关系
--继承关系,只支持单继承
--比如,A是子类 B是父类,A具备B所有的功能(除了父类的私有资源和构造方法)
--子类如果要修改原有功能,需要重写(方法签名与父类一致 + 权限修饰符 >= 父类修饰符)


2.类和接口的关系
--实现关系.可以单实现,也可以多实现
--class A implements B,C{}
--其中A是实现类,B和C是接口,A拥有BC接口的所有功能,只是需要进行方法的重写,否则A就是抽象类


3.接口与接口的关系
--是继承关系,可以单继承,也可以多继承
--interface A extends B,C{}
--其中ABC都是接口,A是子接口,具有BC接口的所有功能(抽象方法)
--class X implements A{}
--X实现类需要重写ABC接口的所有方法,否则就是抽象类
--class A extends B implements C,D{}
--其中A是实现类,也是B的子类,同时拥有CD接口的所有功能
--这时A需要重写CD接口里的所有抽象方法


4.抽象类与接口的区别
--抽象类是一个特殊的类,特殊在,抽象类中可以包含没有方法体的方法(抽象方法)
--接口可以理解成一个特殊的抽象类,特殊在,接口里的都是抽象方法,没有普通方法
--接口会为方法自动拼接public abstract,还会为变量自动拼接public final static
--抽象类可以有构造方法--用来给子类创建对象,接口中没有构造方法
--抽象类和接口都不能实例化(创建对象)
--抽象类可以有普通方法,接口都是抽象方法



6  拓展
6.1  abstract注意事项
抽象方法要求子类继承后必须重写。那么，abstract关键字不可以和哪些关键字一起使用呢？
以下关键字，在抽象类中。用是可以用的，只是没有意义了。

1) private：被私有化后，子类无法重写，与abstract相违背。
2) static：静态优先于对象存在。而abstract是对象间的关系，存在加载顺序问题。
3) final：被final修饰后，无法重写，与abstract相违背。

6.2  接口和抽象类的区别
1) 抽象类和接口都不能直接实例化，如果要实例化，抽象类变量必须指向实现所有抽象方法的子类对象，
   接口变量必须指向实现所有接口方法的类对象。
2) 抽象类要被子类继承，接口要被子类实现。
3) 接口只能做方法声明，抽象类中可以做方法声明，也可以做方法实现
4) 接口里定义的变量只能是公共的静态的常量，抽象类中的变量是普通变量。
5) 抽象类里的抽象方法必须全部被子类所实现，如果子类不能全部实现父类抽象方法，那么该子类只能是抽象类。
   同样，一个实现接口的时候，如不能全部实现接口方法，那么该类也只能为抽象类。
6) 抽象方法只能声明，不能实现，接口是设计的结果 ，抽象类是重构的结果
7) 抽象类里可以没有抽象方法
8) 如果一个类里有抽象方法，那么这个类只能是抽象类
9) 抽象方法要被实现，所以不能是静态的，也不能是私有的。
10) 接口可继承接口，并可多继承接口，但类只能单继承。


6.3 了解软件设计的开闭原则OCP
开放功能扩展，关闭源码修改。等
开闭原则的英文全称是Open Close Principle，缩写是OCP，
它是Java世界里最基础的设计原则，它指导我们如何建立一个稳定的、灵活的系统。
开闭原则的定义是：软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是对于修改是封闭的。
开闭原则，是一种设计模式，随着面向对象程序设计的思想，应运而生。
开，指的是可以在源代码的基础上进行扩展，比如继承，接口，抽象类等。
在JAVA中，之所以用继承，是在可以直接调用类库的前提下，对其功能进行扩展。
不需要应用者去了解封装类的内部逻辑就可以做开发。
闭：指不允许对原有的代码进行修改。以免影响其他现有功能，造成功能瘫痪。*/
